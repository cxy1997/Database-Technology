-- MySQL Script generated by MySQL Workbench
-- Mon Oct 30 21:18:05 2017
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';
SET SQL_SAFE_UPDATES = 0;

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------

CREATE SCHEMA IF NOT EXISTS `mydb` DEFAULT CHARACTER SET utf8 ;
USE `mydb` ;

-- -----------------------------------------------------
-- Table `mydb`.`ranks`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`ranks` ;
DROP TABLE IF EXISTS `mydb`.`credits` ;
DROP TABLE IF EXISTS `mydb`.`UserList` ;
DROP TABLE IF EXISTS `mydb`.`Suppliers` ;
DROP TABLE IF EXISTS `mydb`.`Catalog` ;
DROP TABLE IF EXISTS `mydb`.`Comments` ;
DROP TABLE IF EXISTS `mydb`.`Orders` ;
DROP TABLE IF EXISTS `mydb`.`Variables` ;
DROP TABLE IF EXISTS `mydb`.`Order_contents` ;

CREATE TABLE IF NOT EXISTS `mydb`.`Variables` (
  `user_cnt` INT UNSIGNED NOT NULL,
  `supplier_cnt` INT UNSIGNED NOT NULL,
  `goods_cnt` INT UNSIGNED NOT NULL,
  `order_group_cnt` INT UNSIGNED NOT NULL,
  `order_cnt` INT UNSIGNED NOT NULL,
  PRIMARY KEY (`user_cnt`),
  UNIQUE INDEX `user_cnt_UNIQUE` (`user_cnt` ASC))
ENGINE = InnoDB;

INSERT INTO Variables VALUES(0, 0, 0, 0, 0);

CREATE TABLE IF NOT EXISTS `mydb`.`ranks` (
  `rank` INT NOT NULL,
  `extra_discount` FLOAT NOT NULL,
  PRIMARY KEY (`rank`),
  UNIQUE INDEX `rank_UNIQUE` (`rank` ASC))
ENGINE = InnoDB;

-- -----------------------------------------------------
-- Table `mydb`.`credits`
-- -----------------------------------------------------

CREATE TABLE IF NOT EXISTS `mydb`.`credits` (
  `credit` INT NOT NULL,
  `rank` INT NOT NULL,
  PRIMARY KEY (`credit`),
  UNIQUE INDEX `credit_UNIQUE` (`credit` ASC),
  CONSTRAINT `rank`
    FOREIGN KEY (`rank`)
    REFERENCES `mydb`.`ranks` (`rank`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

INSERT INTO ranks VALUES(0, 1), (1, 0.9), (2, 0.8), (3, 0.7);

-- -----------------------------------------------------
-- Table `mydb`.`UserList`
-- -----------------------------------------------------

CREATE TABLE IF NOT EXISTS `mydb`.`UserList` (
  `User_id` VARCHAR(16) NOT NULL Default '0000',
  `password` VARCHAR(16) NOT NULL Default '1234',
  `user_name` VARCHAR(45) NOT NULL,
  `gender` ENUM('male', 'female') NULL,
  `age` INT UNSIGNED NULL,
  `tel` VARCHAR(8) NULL,
  `credit` INT NULL DEFAULT -1,
  PRIMARY KEY (`User_id`),
  UNIQUE INDEX `User_id_UNIQUE` (`User_id` ASC),
  CONSTRAINT `credit`
    FOREIGN KEY (`credit`)
    REFERENCES `mydb`.`credits` (`credit`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

-- -----------------------------------------------------
-- Table `mydb`.`Suppliers`
-- -----------------------------------------------------

CREATE TABLE IF NOT EXISTS `mydb`.`Suppliers` (
  `Supplier_id` INT UNSIGNED NOT NULL,
  `supplier_name` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`Supplier_id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`Catalog`
-- -----------------------------------------------------

CREATE TABLE IF NOT EXISTS `mydb`.`Catalog` (
  `Goods_id` INT UNSIGNED NOT NULL Default 0,
  `clothes` VARCHAR(45) NULL,
  `food` VARCHAR(45) NULL,
  `entertainments` VARCHAR(45) NULL,
  `luxary` VARCHAR(45) NULL,
  `commodity_name` VARCHAR(45) NOT NULL,
  `production_date` DATETIME NULL,
  `expire_date` DATETIME NULL,
  `price` INT UNSIGNED NOT NULL,
  `discount` FLOAT NOT NULL DEFAULT 1,
  `stock` INT UNSIGNED NOT NULL DEFAULT 1,
  `supplier_id` INT UNSIGNED NULL,
  PRIMARY KEY (`Goods_id`),
  INDEX `Supplier_id_idx` (`supplier_id` ASC),
  CONSTRAINT `Supplier_id`
    FOREIGN KEY (`supplier_id`)
    REFERENCES `mydb`.`Suppliers` (`Supplier_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`Comments`
-- -----------------------------------------------------

CREATE TABLE IF NOT EXISTS `mydb`.`Comments` (
  `order_group_id` INT UNSIGNED NOT NULL Default 0,
  `content` VARCHAR(200) NULL,
  `time` DATETIME NULL,
  `rating` INT NULL,
  PRIMARY KEY (`order_group_id`),
  UNIQUE INDEX `Comment_id_UNIQUE` (`order_group_id` ASC))
ENGINE = InnoDB;

-- -----------------------------------------------------
-- Table `mydb`.`Order_contents`
-- -----------------------------------------------------

CREATE TABLE IF NOT EXISTS `mydb`.`Order_contents` (
  `Order_id` INT UNSIGNED NOT NULL Default 0,
  `Goods_id` INT UNSIGNED NOT NULL,
  `quantity` INT UNSIGNED NOT NULL DEFAULT 1,
  PRIMARY KEY (`Order_id`),
  UNIQUE INDEX `Order_id_UNIQUE` (`Order_id` ASC),
  CONSTRAINT `Goods_id`
    FOREIGN KEY (`Goods_id`)
    REFERENCES `mydb`.`Catalog` (`Goods_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`Orders`
-- -----------------------------------------------------

CREATE TABLE IF NOT EXISTS `mydb`.`Orders` (
  `Order_id` INT UNSIGNED NOT NULL Default 0,
  `User_id` VARCHAR(16) NOT NULL,
  `post_code` VARCHAR(6) NOT NULL,
  `address` VARCHAR(45) NOT NULL,
  `status` ENUM('未处理', '已备货', '已发货', '已完成', '已退货') NOT NULL DEFAULT '未处理',
  `reject_reason` VARCHAR(200) NULL,
  `credits` INT UNSIGNED NULL,
  `cost` FLOAT UNSIGNED NULL,
  `order_date` DATETIME NULL,
  `delivery_date` DATETIME NULL,
  `order_group_id` INT UNSIGNED NULL,
  PRIMARY KEY (`Order_id`),
  UNIQUE INDEX `Order_id_UNIQUE` (`Order_id` ASC),
  CONSTRAINT `Order_id`
    FOREIGN KEY (`Order_id`)
    REFERENCES `mydb`.`Order_contents` (`Order_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `User_id`
    FOREIGN KEY (`User_id`)
    REFERENCES `mydb`.`UserList` (`User_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `order_group_id`
    FOREIGN KEY (`order_group_id`)
    REFERENCES `mydb`.`Comments` (`order_group_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;

-- -----------------------------------------------------
-- Initialize Table credits
-- -----------------------------------------------------

DROP PROCEDURE IF EXISTS initialize_credits;
delimiter //
CREATE PROCEDURE initialize_credits(IN LB INT, IN UB INT)
BEGIN
  DECLARE i INT;
  SET i = LB;
  SELECT i;
  WHILE i <= UB DO -- MARK!!!
    IF i = -1 THEN 
      INSERT INTO credits VALUES(i, 0);
    ELSEIF (0 <= i and i <= 100) THEN 
      INSERT INTO credits VALUES(i, 1);
    ELSEIF (100 <= i and i <= 500) THEN 
      INSERT INTO credits VALUES(i, 2);
    ELSE
      INSERT INTO credits VALUES(i, 3);
    END IF;
    SET i = i + 1;
  END WHILE;
END//
delimiter ;

-- -----------------------------------------------------
-- Trigger for adding users
-- -----------------------------------------------------

DROP TRIGGER IF EXISTS INSERT_USER;
delimiter //
CREATE TRIGGER INSERT_USER BEFORE INSERT ON UserList FOR EACH ROW
BEGIN 
  IF (NEW.age IS NOT NULL) THEN
    IF (NEW.age < 0) THEN
      SET NEW.age = 0;
    END IF;
    IF (NEW.age > 80) THEN
      SET NEW.age = 80;
    END IF;
  END IF;
  IF (NEW.tel IS NOT NULL AND NEW.tel NOT REGEXP '^[0-9]{8}$') THEN
    SET NEW.User_id = NULL;
    SET NEW.password = NULL;
  ELSE
    SELECT user_cnt INTO @cnt FROM Variables;
    SET NEW.User_id = CAST(@cnt AS CHAR(16));
    SET NEW.password = CAST(@cnt AS CHAR(16));
    UPDATE Variables SET user_cnt = user_cnt + 1;
  END IF;
END//
delimiter ;

-- -----------------------------------------------------
-- Trigger for adding suppliers
-- -----------------------------------------------------

DROP TRIGGER IF EXISTS INSERT_SUPPLIER;
delimiter //
CREATE TRIGGER INSERT_SUPPLIER BEFORE INSERT ON Suppliers FOR EACH ROW
BEGIN 
  SELECT supplier_cnt INTO @cnt FROM Variables;
  SET NEW.Supplier_id = @cnt;
    UPDATE Variables SET supplier_cnt = supplier_cnt + 1;
END//
delimiter ;

-- -----------------------------------------------------
-- Trigger for adding goods
-- -----------------------------------------------------

DROP TRIGGER IF EXISTS INSERT_GOODS;
delimiter //
CREATE TRIGGER INSERT_GOODS BEFORE INSERT ON Catalog FOR EACH ROW
BEGIN 
  IF (NEW.price > 0 AND 0 <= NEW.discount AND NEW.discount <= 1 AND (NEW.clothes IS NOT NULL OR NEW.food IS NOT NULL OR NEW.entertainments IS NOT NULL OR NEW.luxary IS NOT NULL)) THEN
    SELECT goods_cnt INTO @cnt FROM Variables;
    SET NEW.Goods_id = @cnt;
    UPDATE Variables SET goods_cnt = goods_cnt + 1;
  ELSE
    SET NEW.Goods_id = NULL;
  END IF;
END//
delimiter ;

-- -----------------------------------------------------
-- Trigger for adding order groups
-- -----------------------------------------------------

DROP TRIGGER IF EXISTS INSERT_ORDER_CONTENTS;
delimiter //
CREATE TRIGGER INSERT_ORDER_CONTENTS BEFORE INSERT ON Order_contents FOR EACH ROW
BEGIN 
  SELECT stock INTO @remains FROM Catalog WHERE Goods_id = NEW.Goods_id;
  IF (NEW.quantity > 0 AND NEW.quantity <= @remains) THEN
    SELECT order_cnt INTO @cnt FROM Variables;
    SET NEW.Order_id = @cnt;
  ELSE
    SET NEW.Order_id = NULL;
  END IF;
END//
delimiter ;

-- -----------------------------------------------------
-- Trigger for placing orders
-- -----------------------------------------------------

DROP TRIGGER IF EXISTS INSERT_ORDERS;
delimiter //
CREATE TRIGGER INSERT_ORDERS BEFORE INSERT ON Orders FOR EACH ROW
BEGIN 
  IF (NEW.credits < 1) THEN
    SET NEW.credits = 1;
  END IF;
  IF (NEW.credits > 5) THEN
    SET NEW.credits = 5;
  END IF;
  IF (NEW.post_code REGEXP '^[0-9]{6}$' AND NEW.status != '已完成' AND NEW.status != '已退货' AND NEW.reject_reason IS NULL AND NEW.delivery_date IS NULL AND NEW.order_group_id IS NULL) THEN
    SELECT order_cnt INTO @cnt FROM Variables;
    SET NEW.Order_id = @cnt;
    UPDATE Variables SET order_cnt = order_cnt + 1;
    SET NEW.order_date = NOW();
    SELECT order_group_cnt INTO @cnt FROM Variables;
    SET NEW.order_group_id = @cnt;
    SELECT COUNT(*) INTO @group_check FROM Comments WHERE order_group_id = NEW.order_group_id;
    IF (@group_check = 0) THEN
      INSERT INTO Comments(order_group_id) VALUES(@cnt);
    END IF;
    SELECT price, discount, stock INTO @unit_price, @gamma_1, @num FROM Catalog WHERE Goods_id IN (SELECT Goods_id FROM Order_contents WHERE Order_id = NEW.Order_id);
    SELECT quantity INTO @q FROM Order_contents WHERE Order_id = NEW.Order_id;
    SELECT extra_discount INTO @gamma_2 FROM ranks WHERE rank IN (SELECT rank FROM credits WHERE credit IN (SELECT credit FROM UserList WHERE User_id = NEW.User_id));
    SET NEW.cost = @unit_price * @q * @gamma_1 * @gamma_2;
    IF (@num >= @q) THEN
      UPDATE Catalog SET stock = stock - @q WHERE Goods_id IN (SELECT Goods_id FROM Order_contents WHERE Order_id = NEW.Order_id);
    ELSE 
      SET NEW.Order_id = NULL;
    END IF;
  ELSE
    SET NEW.Order_id = NULL;
  END IF;
END//
delimiter ;

-- -----------------------------------------------------
-- Trigger for updating orders
-- -----------------------------------------------------

DROP TRIGGER IF EXISTS UPDATE_ORDERS;
delimiter //
CREATE TRIGGER UPDATE_ORDERS BEFORE UPDATE ON Orders FOR EACH ROW
BEGIN 
  IF (((NEW.status = '已完成' AND NEW.delivery_date IS NULL) OR (NEW.status = '已退货' AND NEW.reject_reason IS NULL)) OR (OLD.status = '已完成' OR OLD.status = '已退货')) THEN
    SET NEW.Order_id = NULL;
  END IF;
  IF (NEW.status = '已完成' AND NEW.delivery_date IS NOT NULL) THEN
    UPDATE UserList SET credit = credit + NEW.credits WHERE User_id = NEW.User_id;
  ELSEIF (NEW.status = '已退货' AND NEW.reject_reason IS NOT NULL) THEN
    SELECT Goods_id, quantity INTO @GID, @num FROM Order_contents WHERE Goods_id IN (SELECT Goods_id FROM Order_contents WHERE Order_id = NEW.Order_id);
    UPDATE Catalog SET stock = stock + @num WHERE Goods_id = @GID;
  END IF;
END//
delimiter ;

-- -----------------------------------------------------
-- Trigger for updating user's credits
-- -----------------------------------------------------

DROP TRIGGER IF EXISTS UPDATE_USERLIST;
delimiter //
CREATE TRIGGER UPDATE_USERLIST BEFORE UPDATE ON UserList FOR EACH ROW
BEGIN 
  IF (OLD.credit = -1) THEN
    SET NEW.credit = -1;
  ELSEIF (NEW.credit > 1000) THEN
    SET NEW.credit = 1000;
  END IF;
END//
delimiter ;

-- -----------------------------------------------------
-- Trigger for updating comments
-- -----------------------------------------------------

DROP TRIGGER IF EXISTS UPDATE_COMMENT;
delimiter //
CREATE TRIGGER UPDATE_COMMENT BEFORE UPDATE ON Comments FOR EACH ROW
BEGIN 
  IF (NEW.rating IS NULL) THEN
    SET NEW.order_group_id = NULL;
  END IF;
  SET NEW.time = NOW();
END//
delimiter ;

CALL initialize_credits(-1, 500);
CALL initialize_credits(501, 1000);